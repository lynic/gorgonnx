package main

const testTmpl = `
package operators

import (
	"testing"

	onnx "github.com/owulveryck/onnx-go"
	"github.com/stretchr/testify/assert"
	"gorgonia.org/gorgonia"
	"gorgonia.org/tensor"
)

// Test{{ .TestName }} is autogenerated from {{ .Filename }}
func Test{{ .TestName }}(t *testing.T) {
	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &{{ .Operator }}{}

	{{  range $key, $value := .Attributes }}
	attribute{{ $key }}Name := "{{ $value.Name }}"
	attribute{{ $key }}Type := onnx.AttributeProto_AttributeType({{ $value.Type }})
	{{ if $value.IsPointer }}attribute{{ $key }}Value := {{ $value.Value }}{{end}}
	attribute{{ $key }} := &onnx.AttributeProto{
		Name: &attribute{{ $key }}Name,
		Type: &attribute{{ $key }}Type,
		{{ $value.AssignableType }}: {{ if $value.IsPointer }}&attribute{{ $key }}Value{{ else }}{{ $value.Value }}{{ end }},
	}
	{{ end }}

	attributes := []*onnx.AttributeProto{
		{{  range $key, $value := .Attributes }}attribute{{ $key }},
		{{ end }}
	}


	err := op.Init(attributes)
	t.Logf("Info: operator %#v", op)
	if err != nil {
		t.Fatal(err)
	}
	{{ range .Inputs }}
	{{ .Name}} := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape{{ .Shape }},
			tensor.WithBacking({{ .Data }})))
	{{ end }}
	{{ range .Outputs }}
	{{ .Name }}T := tensor.New(
		tensor.WithShape{{ .Shape }},
		tensor.WithBacking({{ .Data }}))
	{{ .Name}} := new(gorgonia.Node)
	{{ end}} 
	o, err := op.Apply(
		{{ range .Inputs }}{{ .Name}},{{end}}
	)
	if err != nil {
		t.Fatal(err)
	}
	{{ range $key, $value := .Outputs }}
	{{ $value.Name}} = o{{ $key }}
	{{end}}

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}
	{{ range .Outputs }}
	assert.Equal({{ .Name }}T.Shape(), {{ .Name }}.Shape(), "Tensors should be the same")
	assert.Equal({{ .Name }}T.Data(), {{ .Name }}.Value().Data(), "Tensors should be the same")
	{{end}}
}
`
