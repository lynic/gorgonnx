package operators

import (
	"os"
	"testing"

	onnx "github.com/owulveryck/onnx-go"
	"github.com/stretchr/testify/assert"
	"gorgonia.org/gorgonia"
	"gorgonia.org/tensor"
)

// TestConv_with_strides_and_asymmetric_padding is autogenerated from test_conv_with_strides_and_asymmetric_padding
func TestConv_with_strides_and_asymmetric_padding(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Conv{}

	attribute0Name := "kernel_shape"
	attribute0Type := onnx.AttributeProto_AttributeType(7)

	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		Ints: []int64{3, 3},
	}

	attribute1Name := "pads"
	attribute1Type := onnx.AttributeProto_AttributeType(7)

	attribute1 := &onnx.AttributeProto{
		Name: &attribute1Name,
		Type: &attribute1Type,
		Ints: []int64{1, 0, 1, 0},
	}

	attribute2Name := "strides"
	attribute2Type := onnx.AttributeProto_AttributeType(7)

	attribute2 := &onnx.AttributeProto{
		Name: &attribute2Name,
		Type: &attribute2Type,
		Ints: []int64{2, 2},
	}

	attributes := []*onnx.AttributeProto{
		attribute0,
		attribute1,
		attribute2,
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}

	x := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 7, 5),
			tensor.WithBacking([]float32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34})))

	W := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 3, 3),
			tensor.WithBacking([]float32{1, 1, 1, 1, 1, 1, 1, 1, 1})))

	yT := tensor.New(
		tensor.WithShape(1, 1, 4, 2),
		tensor.WithBacking([]float32{21, 33, 99, 117, 189, 207, 171, 183}))
	y := new(gorgonia.Node)

	o, err := op.Apply(
		x, W,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}

	y = o[0]

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}

	assert.Equal(yT.Shape(), y.Shape(), "Tensors should be the same")
	assert.Equal(yT.Data(), y.Value().Data(), "Tensors should be the same")

}

// TestConv_with_strides_no_padding is autogenerated from test_conv_with_strides_no_padding
func TestConv_with_strides_no_padding(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Conv{}

	attribute0Name := "kernel_shape"
	attribute0Type := onnx.AttributeProto_AttributeType(7)

	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		Ints: []int64{3, 3},
	}

	attribute1Name := "pads"
	attribute1Type := onnx.AttributeProto_AttributeType(7)

	attribute1 := &onnx.AttributeProto{
		Name: &attribute1Name,
		Type: &attribute1Type,
		Ints: []int64{0, 0, 0, 0},
	}

	attribute2Name := "strides"
	attribute2Type := onnx.AttributeProto_AttributeType(7)

	attribute2 := &onnx.AttributeProto{
		Name: &attribute2Name,
		Type: &attribute2Type,
		Ints: []int64{2, 2},
	}

	attributes := []*onnx.AttributeProto{
		attribute0,
		attribute1,
		attribute2,
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}

	x := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 7, 5),
			tensor.WithBacking([]float32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34})))

	W := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 3, 3),
			tensor.WithBacking([]float32{1, 1, 1, 1, 1, 1, 1, 1, 1})))

	yT := tensor.New(
		tensor.WithShape(1, 1, 3, 2),
		tensor.WithBacking([]float32{54, 72, 144, 162, 234, 252}))
	y := new(gorgonia.Node)

	o, err := op.Apply(
		x, W,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}

	y = o[0]

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}

	assert.Equal(yT.Shape(), y.Shape(), "Tensors should be the same")
	assert.Equal(yT.Data(), y.Value().Data(), "Tensors should be the same")

}

// TestConv_with_strides_padding is autogenerated from test_conv_with_strides_padding
func TestConv_with_strides_padding(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Conv{}

	attribute0Name := "kernel_shape"
	attribute0Type := onnx.AttributeProto_AttributeType(7)

	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		Ints: []int64{3, 3},
	}

	attribute1Name := "pads"
	attribute1Type := onnx.AttributeProto_AttributeType(7)

	attribute1 := &onnx.AttributeProto{
		Name: &attribute1Name,
		Type: &attribute1Type,
		Ints: []int64{1, 1, 1, 1},
	}

	attribute2Name := "strides"
	attribute2Type := onnx.AttributeProto_AttributeType(7)

	attribute2 := &onnx.AttributeProto{
		Name: &attribute2Name,
		Type: &attribute2Type,
		Ints: []int64{2, 2},
	}

	attributes := []*onnx.AttributeProto{
		attribute0,
		attribute1,
		attribute2,
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}

	x := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 7, 5),
			tensor.WithBacking([]float32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34})))

	W := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 3, 3),
			tensor.WithBacking([]float32{1, 1, 1, 1, 1, 1, 1, 1, 1})))

	yT := tensor.New(
		tensor.WithShape(1, 1, 4, 3),
		tensor.WithBacking([]float32{12, 27, 24, 63, 108, 81, 123, 198, 141, 112, 177, 124}))
	y := new(gorgonia.Node)

	o, err := op.Apply(
		x, W,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}

	y = o[0]

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}

	assert.Equal(yT.Shape(), y.Shape(), "Tensors should be the same")
	assert.Equal(yT.Data(), y.Value().Data(), "Tensors should be the same")

}

// TestConv_transpose is autogenerated from test_convtranspose
func TestConv_transpose(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Conv{}

	attributes := []*onnx.AttributeProto{}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}

	X := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 3, 3),
			tensor.WithBacking([]float32{0, 1, 2, 3, 4, 5, 6, 7, 8})))

	W := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 2, 3, 3),
			tensor.WithBacking([]float32{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1})))

	YT := tensor.New(
		tensor.WithShape(1, 2, 5, 5),
		tensor.WithBacking([]float32{0, 1, 3, 3, 2, 3, 8, 15, 12, 7, 9, 21, 36, 27, 15, 9, 20, 33, 24, 13, 6, 13, 21, 15, 8, 0, 1, 3, 3, 2, 3, 8, 15, 12, 7, 9, 21, 36, 27, 15, 9, 20, 33, 24, 13, 6, 13, 21, 15, 8}))
	Y := new(gorgonia.Node)

	o, err := op.Apply(
		X, W,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}

	Y = o[0]

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}

	assert.Equal(YT.Shape(), Y.Shape(), "Tensors should be the same")
	assert.Equal(YT.Data(), Y.Value().Data(), "Tensors should be the same")

}

// TestConv_transpose_1d is autogenerated from test_convtranspose_1d
func TestConv_transpose_1d(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Conv{}

	attributes := []*onnx.AttributeProto{}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}

	X := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 3),
			tensor.WithBacking([]float32{0, 1, 2})))

	W := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 2, 3),
			tensor.WithBacking([]float32{1, 1, 1, 1, 1, 1})))

	YT := tensor.New(
		tensor.WithShape(1, 2, 5),
		tensor.WithBacking([]float32{0, 1, 3, 3, 2, 0, 1, 3, 3, 2}))
	Y := new(gorgonia.Node)

	o, err := op.Apply(
		X, W,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}

	Y = o[0]

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}

	assert.Equal(YT.Shape(), Y.Shape(), "Tensors should be the same")
	assert.Equal(YT.Data(), Y.Value().Data(), "Tensors should be the same")

}

// TestConv_transpose_3d is autogenerated from test_convtranspose_3d
func TestConv_transpose_3d(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Conv{}

	attributes := []*onnx.AttributeProto{}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}

	X := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 3, 4, 5),
			tensor.WithBacking([]float32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59})))

	W := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 2, 3, 3, 3),
			tensor.WithBacking([]float32{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1})))

	YT := tensor.New(
		tensor.WithShape(1, 2, 5, 6, 7),
		tensor.WithBacking([]float32{0, 1, 3, 6, 9, 7, 4, 5, 12, 21, 27, 33, 24, 13, 15, 33, 54, 63, 72, 51, 27, 30, 63, 99, 108, 117, 81, 42, 25, 52, 81, 87, 93, 64, 33, 15, 31, 48, 51, 54, 37, 19, 20, 42, 66, 72, 78, 54, 28, 50, 104, 162, 174, 186, 128, 66, 90, 186, 288, 306, 324, 222, 114, 120, 246, 378, 396, 414, 282, 144, 90, 184, 282, 294, 306, 208, 106, 50, 102, 156, 162, 168, 114, 58, 60, 123, 189, 198, 207, 141, 72, 135, 276, 423, 441, 459, 312, 159, 225, 459, 702, 729, 756, 513, 261, 270, 549, 837, 864, 891, 603, 306, 195, 396, 603, 621, 639, 432, 219, 105, 213, 324, 333, 342, 231, 117, 60, 122, 186, 192, 198, 134, 68, 130, 264, 402, 414, 426, 288, 146, 210, 426, 648, 666, 684, 462, 234, 240, 486, 738, 756, 774, 522, 264, 170, 344, 522, 534, 546, 368, 186, 90, 182, 276, 282, 288, 194, 98, 40, 81, 123, 126, 129, 87, 44, 85, 172, 261, 267, 273, 184, 93, 135, 273, 414, 423, 432, 291, 147, 150, 303, 459, 468, 477, 321, 162, 105, 212, 321, 327, 333, 224, 113, 55, 111, 168, 171, 174, 117, 59, 0, 1, 3, 6, 9, 7, 4, 5, 12, 21, 27, 33, 24, 13, 15, 33, 54, 63, 72, 51, 27, 30, 63, 99, 108, 117, 81, 42, 25, 52, 81, 87, 93, 64, 33, 15, 31, 48, 51, 54, 37, 19, 20, 42, 66, 72, 78, 54, 28, 50, 104, 162, 174, 186, 128, 66, 90, 186, 288, 306, 324, 222, 114, 120, 246, 378, 396, 414, 282, 144, 90, 184, 282, 294, 306, 208, 106, 50, 102, 156, 162, 168, 114, 58, 60, 123, 189, 198, 207, 141, 72, 135, 276, 423, 441, 459, 312, 159, 225, 459, 702, 729, 756, 513, 261, 270, 549, 837, 864, 891, 603, 306, 195, 396, 603, 621, 639, 432, 219, 105, 213, 324, 333, 342, 231, 117, 60, 122, 186, 192, 198, 134, 68, 130, 264, 402, 414, 426, 288, 146, 210, 426, 648, 666, 684, 462, 234, 240, 486, 738, 756, 774, 522, 264, 170, 344, 522, 534, 546, 368, 186, 90, 182, 276, 282, 288, 194, 98, 40, 81, 123, 126, 129, 87, 44, 85, 172, 261, 267, 273, 184, 93, 135, 273, 414, 423, 432, 291, 147, 150, 303, 459, 468, 477, 321, 162, 105, 212, 321, 327, 333, 224, 113, 55, 111, 168, 171, 174, 117, 59}))
	Y := new(gorgonia.Node)

	o, err := op.Apply(
		X, W,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}

	Y = o[0]

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}

	assert.Equal(YT.Shape(), Y.Shape(), "Tensors should be the same")
	assert.Equal(YT.Data(), Y.Value().Data(), "Tensors should be the same")

}

// TestConv_transpose_kernel_shape is autogenerated from test_convtranspose_kernel_shape
func TestConv_transpose_kernel_shape(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Conv{}

	attribute0Name := "kernel_shape"
	attribute0Type := onnx.AttributeProto_AttributeType(7)

	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		Ints: []int64{3, 3},
	}

	attribute1Name := "output_padding"
	attribute1Type := onnx.AttributeProto_AttributeType(7)

	attribute1 := &onnx.AttributeProto{
		Name: &attribute1Name,
		Type: &attribute1Type,
		Ints: []int64{1, 1},
	}

	attribute2Name := "output_shape"
	attribute2Type := onnx.AttributeProto_AttributeType(7)

	attribute2 := &onnx.AttributeProto{
		Name: &attribute2Name,
		Type: &attribute2Type,
		Ints: []int64{10, 8},
	}

	attribute3Name := "strides"
	attribute3Type := onnx.AttributeProto_AttributeType(7)

	attribute3 := &onnx.AttributeProto{
		Name: &attribute3Name,
		Type: &attribute3Type,
		Ints: []int64{3, 2},
	}

	attributes := []*onnx.AttributeProto{
		attribute0,
		attribute1,
		attribute2,
		attribute3,
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}

	X := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 3, 3),
			tensor.WithBacking([]float32{0, 1, 2, 3, 4, 5, 6, 7, 8})))

	W := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 2, 3, 3),
			tensor.WithBacking([]float32{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1})))

	YT := tensor.New(
		tensor.WithShape(1, 2, 10, 8),
		tensor.WithBacking([]float32{0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0}))
	Y := new(gorgonia.Node)

	o, err := op.Apply(
		X, W,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}

	Y = o[0]

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}

	assert.Equal(YT.Shape(), Y.Shape(), "Tensors should be the same")
	assert.Equal(YT.Data(), Y.Value().Data(), "Tensors should be the same")

}

// TestConv_transpose_output_shape is autogenerated from test_convtranspose_output_shape
func TestConv_transpose_output_shape(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Conv{}

	attribute0Name := "output_shape"
	attribute0Type := onnx.AttributeProto_AttributeType(7)

	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		Ints: []int64{1, 2, 10, 8},
	}

	attribute1Name := "strides"
	attribute1Type := onnx.AttributeProto_AttributeType(7)

	attribute1 := &onnx.AttributeProto{
		Name: &attribute1Name,
		Type: &attribute1Type,
		Ints: []int64{3, 2},
	}

	attributes := []*onnx.AttributeProto{
		attribute0,
		attribute1,
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}

	X := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 3, 3),
			tensor.WithBacking([]float32{0, 1, 2, 3, 4, 5, 6, 7, 8})))

	W := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 2, 3, 3),
			tensor.WithBacking([]float32{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1})))

	YT := tensor.New(
		tensor.WithShape(1, 2, 10, 8),
		tensor.WithBacking([]float32{0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0}))
	Y := new(gorgonia.Node)

	o, err := op.Apply(
		X, W,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}

	Y = o[0]

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}

	assert.Equal(YT.Shape(), Y.Shape(), "Tensors should be the same")
	assert.Equal(YT.Data(), Y.Value().Data(), "Tensors should be the same")

}

// TestConv_transpose_pad is autogenerated from test_convtranspose_pad
func TestConv_transpose_pad(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Conv{}

	attribute0Name := "output_padding"
	attribute0Type := onnx.AttributeProto_AttributeType(7)

	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		Ints: []int64{1, 1},
	}

	attribute1Name := "strides"
	attribute1Type := onnx.AttributeProto_AttributeType(7)

	attribute1 := &onnx.AttributeProto{
		Name: &attribute1Name,
		Type: &attribute1Type,
		Ints: []int64{3, 2},
	}

	attributes := []*onnx.AttributeProto{
		attribute0,
		attribute1,
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}

	X := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 3, 3),
			tensor.WithBacking([]float32{0, 1, 2, 3, 4, 5, 6, 7, 8})))

	W := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 2, 3, 3),
			tensor.WithBacking([]float32{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1})))

	YT := tensor.New(
		tensor.WithShape(1, 2, 10, 8),
		tensor.WithBacking([]float32{0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0}))
	Y := new(gorgonia.Node)

	o, err := op.Apply(
		X, W,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}

	Y = o[0]

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}

	assert.Equal(YT.Shape(), Y.Shape(), "Tensors should be the same")
	assert.Equal(YT.Data(), Y.Value().Data(), "Tensors should be the same")

}

// TestConv_transpose_pads is autogenerated from test_convtranspose_pads
func TestConv_transpose_pads(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Conv{}

	attribute0Name := "pads"
	attribute0Type := onnx.AttributeProto_AttributeType(7)

	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		Ints: []int64{1, 2, 1, 2},
	}

	attribute1Name := "strides"
	attribute1Type := onnx.AttributeProto_AttributeType(7)

	attribute1 := &onnx.AttributeProto{
		Name: &attribute1Name,
		Type: &attribute1Type,
		Ints: []int64{3, 2},
	}

	attributes := []*onnx.AttributeProto{
		attribute0,
		attribute1,
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}

	X := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 3, 3),
			tensor.WithBacking([]float32{0, 1, 2, 3, 4, 5, 6, 7, 8})))

	W := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 2, 3, 3),
			tensor.WithBacking([]float32{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1})))

	YT := tensor.New(
		tensor.WithShape(1, 2, 7, 3),
		tensor.WithBacking([]float32{1, 1, 3, 1, 1, 3, 7, 4, 9, 7, 4, 9, 7, 4, 9, 13, 7, 15, 13, 7, 15, 1, 1, 3, 1, 1, 3, 7, 4, 9, 7, 4, 9, 7, 4, 9, 13, 7, 15, 13, 7, 15}))
	Y := new(gorgonia.Node)

	o, err := op.Apply(
		X, W,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}

	Y = o[0]

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}

	assert.Equal(YT.Shape(), Y.Shape(), "Tensors should be the same")
	assert.Equal(YT.Data(), Y.Value().Data(), "Tensors should be the same")

}

// TestConv_transpose_with_kernel is autogenerated from test_convtranspose_with_kernel
func TestConv_transpose_with_kernel(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Conv{}

	attribute0Name := "kernel_shape"
	attribute0Type := onnx.AttributeProto_AttributeType(7)

	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		Ints: []int64{3, 3},
	}

	attribute1Name := "output_padding"
	attribute1Type := onnx.AttributeProto_AttributeType(7)

	attribute1 := &onnx.AttributeProto{
		Name: &attribute1Name,
		Type: &attribute1Type,
		Ints: []int64{1, 1},
	}

	attribute2Name := "output_shape"
	attribute2Type := onnx.AttributeProto_AttributeType(7)

	attribute2 := &onnx.AttributeProto{
		Name: &attribute2Name,
		Type: &attribute2Type,
		Ints: []int64{10, 8},
	}

	attribute3Name := "strides"
	attribute3Type := onnx.AttributeProto_AttributeType(7)

	attribute3 := &onnx.AttributeProto{
		Name: &attribute3Name,
		Type: &attribute3Type,
		Ints: []int64{3, 2},
	}

	attributes := []*onnx.AttributeProto{
		attribute0,
		attribute1,
		attribute2,
		attribute3,
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}

	x := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 1, 3, 3),
			tensor.WithBacking([]float32{0, 1, 2, 3, 4, 5, 6, 7, 8})))

	w := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(1, 2, 3, 3),
			tensor.WithBacking([]float32{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1})))

	yT := tensor.New(
		tensor.WithShape(1, 2, 10, 8),
		tensor.WithBacking([]float32{0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 0, 0, 1, 1, 3, 2, 2, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 3, 3, 7, 4, 9, 5, 5, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 6, 6, 13, 7, 15, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0}))
	y := new(gorgonia.Node)

	o, err := op.Apply(
		x, w,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}

	y = o[0]

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}

	assert.Equal(yT.Shape(), y.Shape(), "Tensors should be the same")
	assert.Equal(yT.Data(), y.Value().Data(), "Tensors should be the same")

}
