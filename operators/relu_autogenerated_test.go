
package operators

import (
	"os"
	"testing"

	onnx "github.com/owulveryck/onnx-go"
	"github.com/stretchr/testify/assert"
	"gorgonia.org/gorgonia"
	"gorgonia.org/tensor"
)


// TestRelu_ is autogenerated from test_relu
func TestRelu_(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Relu{}

	

	attributes := []*onnx.AttributeProto{
		
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}
	
	x := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(3, 4, 5),
			tensor.WithBacking([]float32{1.7640524, 0.4001572, 0.978738, 2.2408931, 1.867558, -0.9772779, 0.95008844, -0.1513572, -0.10321885, 0.41059852, 0.14404356, 1.4542735, 0.7610377, 0.121675014, 0.44386324, 0.33367434, 1.4940791, -0.20515826, 0.3130677, -0.85409576, -2.5529897, 0.6536186, 0.8644362, -0.742165, 2.2697546, -1.4543657, 0.045758516, -0.18718386, 1.5327792, 1.4693588, 0.15494743, 0.37816253, -0.88778573, -1.9807965, -0.34791216, 0.15634897, 1.2302907, 1.2023798, -0.3873268, -0.30230275, -1.048553, -1.420018, -1.7062702, 1.9507754, -0.5096522, -0.4380743, -1.2527953, 0.7774904, -1.6138978, -0.21274029, -0.89546657, 0.3869025, -0.51080513, -1.1806322, -0.028182229, 0.42833188, 0.06651722, 0.3024719, -0.6343221, -0.36274117})),
			gorgonia.WithName("x"))
	
	
	yT := tensor.New(
		tensor.WithShape(3, 4, 5),
		tensor.WithBacking([]float32{1.7640524, 0.4001572, 0.978738, 2.2408931, 1.867558, 0, 0.95008844, 0, 0, 0.41059852, 0.14404356, 1.4542735, 0.7610377, 0.121675014, 0.44386324, 0.33367434, 1.4940791, 0, 0.3130677, 0, 0, 0.6536186, 0.8644362, 0, 2.2697546, 0, 0.045758516, 0, 1.5327792, 1.4693588, 0.15494743, 0.37816253, 0, 0, 0, 0.15634897, 1.2302907, 1.2023798, 0, 0, 0, 0, 0, 1.9507754, 0, 0, 0, 0.7774904, 0, 0, 0, 0.3869025, 0, 0, 0, 0.42833188, 0.06651722, 0.3024719, 0, 0}))
	y := new(gorgonia.Node)
	 
	o, err := op.Apply(
		x,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}
		_, ok = err.(*gorgonia.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}
	
	y = o[0]
	

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}
	
	assert.Equal(yT.Shape(), y.Shape(), "Tensors should be the same")
	assert.InDeltaSlice(yT.Data(), y.Value().Data(), 1e-5,"Tensors should be the same")
	
}
