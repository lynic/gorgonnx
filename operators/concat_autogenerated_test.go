
package operators

import (
	"os"
	"testing"

	onnx "github.com/owulveryck/onnx-go"
	"github.com/stretchr/testify/assert"
	"gorgonia.org/gorgonia"
	"gorgonia.org/tensor"
)


// TestConcat_1d_axis_0 is autogenerated from test_concat_1d_axis_0
func TestConcat_1d_axis_0(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Concat{}

	
	attribute0Name := "axis"
	attribute0Type := onnx.AttributeProto_AttributeType(2)
	attribute0Value := int64(0)
	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		I: &attribute0Value,
	}
	

	attributes := []*onnx.AttributeProto{
		attribute0,
		
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}
	
	value0 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2),
			tensor.WithBacking([]float32{1, 2})),
			gorgonia.WithName("value0"))
	
	value1 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2),
			tensor.WithBacking([]float32{3, 4})),
			gorgonia.WithName("value1"))
	
	
	outputT := tensor.New(
		tensor.WithShape(4),
		tensor.WithBacking([]float32{1, 2, 3, 4}))
	output := new(gorgonia.Node)
	 
	o, err := op.Apply(
		value0,value1,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}
	
	output = o[0]
	

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}
	
	assert.Equal(outputT.Shape(), output.Shape(), "Tensors should be the same")
	assert.Equal(outputT.Data(), output.Value().Data(), "Tensors should be the same")
	
}

// TestConcat_2d_axis_0 is autogenerated from test_concat_2d_axis_0
func TestConcat_2d_axis_0(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Concat{}

	
	attribute0Name := "axis"
	attribute0Type := onnx.AttributeProto_AttributeType(2)
	attribute0Value := int64(0)
	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		I: &attribute0Value,
	}
	

	attributes := []*onnx.AttributeProto{
		attribute0,
		
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}
	
	value0 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2, 2),
			tensor.WithBacking([]float32{1, 2, 3, 4})),
			gorgonia.WithName("value0"))
	
	value1 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2, 2),
			tensor.WithBacking([]float32{5, 6, 7, 8})),
			gorgonia.WithName("value1"))
	
	
	outputT := tensor.New(
		tensor.WithShape(4, 2),
		tensor.WithBacking([]float32{1, 2, 3, 4, 5, 6, 7, 8}))
	output := new(gorgonia.Node)
	 
	o, err := op.Apply(
		value0,value1,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}
	
	output = o[0]
	

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}
	
	assert.Equal(outputT.Shape(), output.Shape(), "Tensors should be the same")
	assert.Equal(outputT.Data(), output.Value().Data(), "Tensors should be the same")
	
}

// TestConcat_2d_axis_1 is autogenerated from test_concat_2d_axis_1
func TestConcat_2d_axis_1(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Concat{}

	
	attribute0Name := "axis"
	attribute0Type := onnx.AttributeProto_AttributeType(2)
	attribute0Value := int64(1)
	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		I: &attribute0Value,
	}
	

	attributes := []*onnx.AttributeProto{
		attribute0,
		
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}
	
	value0 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2, 2),
			tensor.WithBacking([]float32{1, 2, 3, 4})),
			gorgonia.WithName("value0"))
	
	value1 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2, 2),
			tensor.WithBacking([]float32{5, 6, 7, 8})),
			gorgonia.WithName("value1"))
	
	
	outputT := tensor.New(
		tensor.WithShape(2, 4),
		tensor.WithBacking([]float32{1, 2, 5, 6, 3, 4, 7, 8}))
	output := new(gorgonia.Node)
	 
	o, err := op.Apply(
		value0,value1,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}
	
	output = o[0]
	

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}
	
	assert.Equal(outputT.Shape(), output.Shape(), "Tensors should be the same")
	assert.Equal(outputT.Data(), output.Value().Data(), "Tensors should be the same")
	
}

// TestConcat_3d_axis_0 is autogenerated from test_concat_3d_axis_0
func TestConcat_3d_axis_0(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Concat{}

	
	attribute0Name := "axis"
	attribute0Type := onnx.AttributeProto_AttributeType(2)
	attribute0Value := int64(0)
	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		I: &attribute0Value,
	}
	

	attributes := []*onnx.AttributeProto{
		attribute0,
		
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}
	
	value0 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2, 2, 2),
			tensor.WithBacking([]float32{1, 2, 3, 4, 5, 6, 7, 8})),
			gorgonia.WithName("value0"))
	
	value1 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2, 2, 2),
			tensor.WithBacking([]float32{9, 10, 11, 12, 13, 14, 15, 16})),
			gorgonia.WithName("value1"))
	
	
	outputT := tensor.New(
		tensor.WithShape(4, 2, 2),
		tensor.WithBacking([]float32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}))
	output := new(gorgonia.Node)
	 
	o, err := op.Apply(
		value0,value1,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}
	
	output = o[0]
	

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}
	
	assert.Equal(outputT.Shape(), output.Shape(), "Tensors should be the same")
	assert.Equal(outputT.Data(), output.Value().Data(), "Tensors should be the same")
	
}

// TestConcat_3d_axis_1 is autogenerated from test_concat_3d_axis_1
func TestConcat_3d_axis_1(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Concat{}

	
	attribute0Name := "axis"
	attribute0Type := onnx.AttributeProto_AttributeType(2)
	attribute0Value := int64(1)
	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		I: &attribute0Value,
	}
	

	attributes := []*onnx.AttributeProto{
		attribute0,
		
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}
	
	value0 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2, 2, 2),
			tensor.WithBacking([]float32{1, 2, 3, 4, 5, 6, 7, 8})),
			gorgonia.WithName("value0"))
	
	value1 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2, 2, 2),
			tensor.WithBacking([]float32{9, 10, 11, 12, 13, 14, 15, 16})),
			gorgonia.WithName("value1"))
	
	
	outputT := tensor.New(
		tensor.WithShape(2, 4, 2),
		tensor.WithBacking([]float32{1, 2, 3, 4, 9, 10, 11, 12, 5, 6, 7, 8, 13, 14, 15, 16}))
	output := new(gorgonia.Node)
	 
	o, err := op.Apply(
		value0,value1,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}
	
	output = o[0]
	

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}
	
	assert.Equal(outputT.Shape(), output.Shape(), "Tensors should be the same")
	assert.Equal(outputT.Data(), output.Value().Data(), "Tensors should be the same")
	
}

// TestConcat_3d_axis_2 is autogenerated from test_concat_3d_axis_2
func TestConcat_3d_axis_2(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Concat{}

	
	attribute0Name := "axis"
	attribute0Type := onnx.AttributeProto_AttributeType(2)
	attribute0Value := int64(2)
	attribute0 := &onnx.AttributeProto{
		Name: &attribute0Name,
		Type: &attribute0Type,
		I: &attribute0Value,
	}
	

	attributes := []*onnx.AttributeProto{
		attribute0,
		
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}
	
	value0 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2, 2, 2),
			tensor.WithBacking([]float32{1, 2, 3, 4, 5, 6, 7, 8})),
			gorgonia.WithName("value0"))
	
	value1 := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2, 2, 2),
			tensor.WithBacking([]float32{9, 10, 11, 12, 13, 14, 15, 16})),
			gorgonia.WithName("value1"))
	
	
	outputT := tensor.New(
		tensor.WithShape(2, 2, 4),
		tensor.WithBacking([]float32{1, 2, 9, 10, 3, 4, 11, 12, 5, 6, 13, 14, 7, 8, 15, 16}))
	output := new(gorgonia.Node)
	 
	o, err := op.Apply(
		value0,value1,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}
	
	output = o[0]
	

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}
	
	assert.Equal(outputT.Shape(), output.Shape(), "Tensors should be the same")
	assert.Equal(outputT.Data(), output.Value().Data(), "Tensors should be the same")
	
}
