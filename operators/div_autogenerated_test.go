
package operators

import (
	"os"
	"testing"

	onnx "github.com/owulveryck/onnx-go"
	"github.com/stretchr/testify/assert"
	"gorgonia.org/gorgonia"
	"gorgonia.org/tensor"
)


// TestDiv_ is autogenerated from test_div
func TestDiv_(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Div{}

	

	attributes := []*onnx.AttributeProto{
		
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}
	
	x := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(3, 4, 5),
			tensor.WithBacking([]float32{1.7640524, 0.4001572, 0.978738, 2.2408931, 1.867558, -0.9772779, 0.95008844, -0.1513572, -0.10321885, 0.41059852, 0.14404356, 1.4542735, 0.7610377, 0.121675014, 0.44386324, 0.33367434, 1.4940791, -0.20515826, 0.3130677, -0.85409576, -2.5529897, 0.6536186, 0.8644362, -0.742165, 2.2697546, -1.4543657, 0.045758516, -0.18718386, 1.5327792, 1.4693588, 0.15494743, 0.37816253, -0.88778573, -1.9807965, -0.34791216, 0.15634897, 1.2302907, 1.2023798, -0.3873268, -0.30230275, -1.048553, -1.420018, -1.7062702, 1.9507754, -0.5096522, -0.4380743, -1.2527953, 0.7774904, -1.6138978, -0.21274029, -0.89546657, 0.3869025, -0.51080513, -1.1806322, -0.028182229, 0.42833188, 0.06651722, 0.3024719, -0.6343221, -0.36274117})),
			gorgonia.WithName("x"))
	
	y := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(3, 4, 5),
			tensor.WithBacking([]float32{1.2961402, 1.1187277, 1.3179832, 1.414263, 1.0641475, 1.6924721, 1.5666015, 1.2653894, 1.5232481, 1.0939405, 1.5759466, 1.9292963, 1.318569, 1.6674104, 1.1317979, 1.7163272, 1.2894061, 1.1831913, 1.5865129, 1.0201075, 1.82894, 1.0046955, 1.6778165, 1.270008, 1.735194, 1.9621885, 1.2487532, 1.5761573, 1.592042, 1.5722519, 1.2230816, 1.952749, 1.4471254, 1.8464086, 1.6994793, 1.297437, 1.8137978, 1.3965057, 1.8811033, 1.5812728, 1.8817353, 1.6925316, 1.7252543, 1.5013244, 1.9560837, 1.6439903, 1.4238551, 1.6063932, 1.0191932, 1.3015748, 1.6601735, 1.2900776, 1.6180154, 1.4287686, 1.1354741, 1.2982824, 1.5699649, 1.5908728, 1.5743253, 1.6532009})),
			gorgonia.WithName("y"))
	
	
	zT := tensor.New(
		tensor.WithShape(3, 4, 5),
		tensor.WithBacking([]float32{1.3610044, 0.35768956, 0.7426028, 1.5844953, 1.7549804, -0.57742625, 0.6064646, -0.11961314, -0.06776234, 0.37533897, 0.0914013, 0.7537844, 0.5771694, 0.07297245, 0.39217535, 0.19441184, 1.1587343, -0.173394, 0.1973307, -0.83726054, -1.3958849, 0.65056384, 0.515215, -0.58437824, 1.3080697, -0.74119574, 0.036643364, -0.118759625, 0.96277565, 0.93455684, 0.1266861, 0.1936565, -0.61348224, -1.0727834, -0.2047169, 0.120506026, 0.6782954, 0.8609917, -0.20590407, -0.19117685, -0.5572266, -0.8389905, -0.9889964, 1.2993697, -0.26054725, -0.26647013, -0.87986153, 0.48399755, -1.5835053, -0.16344838, -0.5393813, 0.2999064, -0.31569856, -0.8263285, -0.024819791, 0.32992196, 0.042368602, 0.19012953, -0.4029168, -0.21941748}))
	z := new(gorgonia.Node)
	 
	o, err := op.Apply(
		x,y,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}
	
	z = o[0]
	

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}
	
	assert.Equal(zT.Shape(), z.Shape(), "Tensors should be the same")
	assert.Equal(zT.Data(), z.Value().Data(), "Tensors should be the same")
	
}

// TestDiv_bcast is autogenerated from test_div_bcast
func TestDiv_bcast(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Div{}

	

	attributes := []*onnx.AttributeProto{
		
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}
	
	x := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(3, 4, 5),
			tensor.WithBacking([]float32{1.7640524, 0.4001572, 0.978738, 2.2408931, 1.867558, -0.9772779, 0.95008844, -0.1513572, -0.10321885, 0.41059852, 0.14404356, 1.4542735, 0.7610377, 0.121675014, 0.44386324, 0.33367434, 1.4940791, -0.20515826, 0.3130677, -0.85409576, -2.5529897, 0.6536186, 0.8644362, -0.742165, 2.2697546, -1.4543657, 0.045758516, -0.18718386, 1.5327792, 1.4693588, 0.15494743, 0.37816253, -0.88778573, -1.9807965, -0.34791216, 0.15634897, 1.2302907, 1.2023798, -0.3873268, -0.30230275, -1.048553, -1.420018, -1.7062702, 1.9507754, -0.5096522, -0.4380743, -1.2527953, 0.7774904, -1.6138978, -0.21274029, -0.89546657, 0.3869025, -0.51080513, -1.1806322, -0.028182229, 0.42833188, 0.06651722, 0.3024719, -0.6343221, -0.36274117})),
			gorgonia.WithName("x"))
	
	y := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(5),
			tensor.WithBacking([]float32{1.2961402, 1.1187277, 1.3179832, 1.414263, 1.0641475})),
			gorgonia.WithName("y"))
	
	
	zT := tensor.New(
		tensor.WithShape(3, 4, 5),
		tensor.WithBacking([]float32{1.3610044, 0.35768956, 0.7426028, 1.5844953, 1.7549804, -0.7539909, 0.849258, -0.114840016, -0.072984196, 0.3858474, 0.1111327, 1.2999352, 0.57742596, 0.086034216, 0.4171069, 0.25743693, 1.3355163, -0.15566076, 0.22136456, -0.80261034, -1.9696864, 0.5842517, 0.65587807, -0.5247716, 2.1329324, -1.1220744, 0.040902283, -0.14202295, 1.0838007, 1.380785, 0.11954527, 0.33802912, -0.6735941, -1.4005857, -0.3269398, 0.12062659, 1.0997231, 0.9122877, -0.27387184, -0.28407976, -0.8089812, -1.2693151, -1.294607, 1.3793583, -0.47893006, -0.33798373, -1.1198394, 0.5899092, -1.1411582, -0.19991617, -0.6908717, 0.34584156, -0.38756576, -0.8348039, -0.026483387, 0.33046725, 0.059457917, 0.22949603, -0.44851777, -0.3408749}))
	z := new(gorgonia.Node)
	 
	o, err := op.Apply(
		x,y,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}
	
	z = o[0]
	

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}
	
	assert.Equal(zT.Shape(), z.Shape(), "Tensors should be the same")
	assert.Equal(zT.Data(), z.Value().Data(), "Tensors should be the same")
	
}

// TestDiv_example is autogenerated from test_div_example
func TestDiv_example(t *testing.T) {
	debug := os.Getenv("SKIP_NOT_IMPLEMENTED")
	skip := true
	if debug == "false" {
		skip = false
	}

	assert := assert.New(t)

	g := gorgonia.NewGraph()
	op := &Div{}

	

	attributes := []*onnx.AttributeProto{
		
	}

	if len(attributes) != 0 {
		err := op.Init(attributes)
		t.Logf("Info: operator %#v", op)
		if err != nil {
			_, ok := err.(*onnx.ErrNotImplemented)
			if ok && skip {
				t.SkipNow()
			}

			t.Fatal(err)
		}
	}
	
	x := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2),
			tensor.WithBacking([]float32{3, 4})),
			gorgonia.WithName("x"))
	
	y := gorgonia.NodeFromAny(g,
		tensor.New(
			tensor.WithShape(2),
			tensor.WithBacking([]float32{1, 2})),
			gorgonia.WithName("y"))
	
	
	zT := tensor.New(
		tensor.WithShape(2),
		tensor.WithBacking([]float32{3, 2}))
	z := new(gorgonia.Node)
	 
	o, err := op.Apply(
		x,y,
	)
	if err != nil {
		_, ok := err.(*onnx.ErrNotImplemented)
		if ok && skip {
			t.SkipNow()
		}

		t.Fatal(err)
	}
	
	z = o[0]
	

	machine := gorgonia.NewTapeMachine(g)
	if err = machine.RunAll(); err != nil {
		t.Fatal(err)
	}
	
	assert.Equal(zT.Shape(), z.Shape(), "Tensors should be the same")
	assert.Equal(zT.Data(), z.Value().Data(), "Tensors should be the same")
	
}
